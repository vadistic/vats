type Query {
  invite(where: InviteWhereUniqueInput!): Invite
  invites(
    where: InviteWhereInput
    orderBy: InviteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Invite]!
}

type Mutation {
  createInvite(data: InviteCreateInput): Invite!
  updateInvite(where: InviteWhereUniqueInput): Invite!
  deleteInvite(where: InviteWhereUniqueInput): Invite!
}

type Invite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  expireAt: DateTime!
  invitedBy(where: UserWhereInput): User!
}

enum InviteOrderByInput {
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  expireAt_ASC
  expireAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input InviteWhereUniqueInput {
  id: ID!
}

input InviteWhereInput {
  AND: [InviteWhereInput!]
  OR: [InviteWhereInput!]
  NOT: [InviteWhereInput!]

  id: ID
  email: String
  invitedBy: UserWhereInput
}

input InviteCreateInput {
  email: String!
}
