type Query {
  # Invite
  # import Invite, InviteWhereUniqueInput, InviteWhereInput, InviteOrderByInput  from "../generated/prisma.graphql"
  invite(where: InviteWhereUniqueInput!): Invite
  invites(
    where: InviteWhereInput
    orderBy: InviteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Invite]!

  # Workspace
  # import Workspace, WorkspaceWhereUniqueInput, WorkspaceWhereInput, WorkspaceOrderByInput  from "../generated/prisma.graphql"
  workspace(where: WorkspaceWhereUniqueInput!): Workspace
  workspaces(
    where: WorkspaceWhereInput
    orderBy: WorkspaceOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Workspace]!

  # User
  # import UserWhereUniqueInput, UserWhereInput, UserOrderByInput  from "../generated/prisma.graphql"
  # import User from './user.graphql'
  user(where: UserWhereUniqueInput!): User
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!

  # Offer
  # import Offer, OfferWhereUniqueInput, OfferWhereInput, OfferOrderByInput  from "../generated/prisma.graphql"
  offer(where: OfferWhereUniqueInput!): Offer
  offers(
    where: OfferWhereInput
    orderBy: OfferOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Offer]!

  # Stage
  # import Stage, StageWhereUniqueInput, StageWhereInput, StageOrderByInput  from "../generated/prisma.graphql"
  stage(where: StageWhereUniqueInput!): Stage
  stages(
    where: StageWhereInput
    orderBy: StageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Stage]!

  # Application
  # import Application, ApplicationWhereUniqueInput, ApplicationWhereInput, ApplicationOrderByInput  from "../generated/prisma.graphql"
  application(where: ApplicationWhereUniqueInput!): Application
  applications(
    where: ApplicationWhereInput
    orderBy: ApplicationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Application]!

  # Candidate
  # import Candidate, CandidateWhereUniqueInput, CandidateWhereInput, CandidateOrderByInput  from "../generated/prisma.graphql"
  candidate(where: CandidateWhereUniqueInput!): Candidate
  candidates(
    where: CandidateWhereInput
    orderBy: CandidateOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Candidate]!

  # Comment
  # import Comment, CommentWhereUniqueInput, CommentWhereInput, CommentOrderByInput  from "../generated/prisma.graphql"
  comment(where: CommentWhereUniqueInput!): Comment
  comments(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Comment]!

  # Task
  # import Task, TaskWhereUniqueInput, TaskWhereInput, TaskOrderByInput  from "../generated/prisma.graphql"
  task(where: TaskWhereUniqueInput!): Task
  tasks(
    where: TaskWhereInput
    orderBy: TaskOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Task]!
}

type Mutation {
  # Authentication

  # import AuthPayload from './auth.graphql'
  createWorkspace(
    name: String!
    firstName: String!
    lastName: String!
    email: String!
    username: String!
    password: String!
  ): AuthPayload!
  signup(password: String!, username: String!, inviteId: ID!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!

  # import Invite from '../generated/prisma.graphql'
  invite(email: String!): Invite!

  # Invite
  createInvite(data: InviteCreateInput!): Invite!
  updateInvite(data: InviteUpdateInput!, where: InviteWhereUniqueInput!): Invite
  deleteInvite(where: InviteWhereUniqueInput!): Invite

  # Workspace
  # import Workspace, WorkspaceUpdateInput, WorkspaceWhereUniqueInput  from "../generated/prisma.graphql"
  updateWorkspace(data: WorkspaceUpdateInput!, where: WorkspaceWhereUniqueInput!): Workspace
  deleteWorkspace(where: WorkspaceWhereUniqueInput!): Workspace

  # User

  # import UserCreateInput, UserUpdateInput, UserWhereUniqueInput  from "../generated/prisma.graphql"
  # import User from './user.graphql'
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteUser(where: UserWhereUniqueInput!): User

  # Offer
  # import Offer, OfferCreateInput, OfferUpdateInput, OfferWhereUniqueInput  from "../generated/prisma.graphql"
  createOffer(data: OfferCreateInput!): Offer!
  updateOffer(data: OfferUpdateInput!, where: OfferWhereUniqueInput!): Offer
  deleteOffer(where: OfferWhereUniqueInput!): Offer

  # Stage
  # import Stage, StageCreateInput, StageUpdateInput, StageWhereUniqueInput  from "../generated/prisma.graphql"
  createStage(data: StageCreateInput!): Stage!
  updateStage(data: StageUpdateInput!, where: StageWhereUniqueInput!): Stage
  deleteStage(where: StageWhereUniqueInput!): Stage

  # Application
  # import Application, UserCreateInput, UserUpdateInput, UserWhereUniqueInput  from "../generated/prisma.graphql"
  createApplication(data: ApplicationCreateInput!): Application!
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  deleteApplication(where: ApplicationWhereUniqueInput!): Application

  # Candidate
  # import Candidate, UserCreateInput, UserUpdateInput, UserWhereUniqueInput  from "../generated/prisma.graphql"
  createCandidate(data: CandidateCreateInput!): Candidate!
  updateCandidate(data: CandidateUpdateInput!, where: CandidateWhereUniqueInput!): Candidate
  deleteCandidate(where: CandidateWhereUniqueInput!): Candidate

  # Comment
  # import Comment, UserCreateInput, UserUpdateInput, UserWhereUniqueInput  from "../generated/prisma.graphql"
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  deleteComment(where: CommentWhereUniqueInput!): Comment

  # Task
  # import Task, UserCreateInput, UserUpdateInput, UserWhereUniqueInput  from "../generated/prisma.graphql"
  createTask(data: TaskCreateInput!): Task!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  deleteTask(where: TaskWhereUniqueInput!): Task
}
