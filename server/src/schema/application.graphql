type Query {
  application(where: ApplicationWhereUniqueInput!): Application
  applications(
    where: ApplicationWhereInput
    orderBy: ApplicationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Application]!
}

type Mutation {
  createApplication(data: ApplicationCreateInput!): Application!
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
}

type Application {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  offer(where: OfferWhereInput): Offer!
  candidate(where: CandidateWhereInput): Candidate!
  stage(where: StageWhereInput): Stage!
}

enum ApplicationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ApplicationWhereUniqueInput {
  id: ID
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]

  id: ID
  createdAt: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime

  updatedAt: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime

  offer: OfferWhereInput
  candidate: CandidateWhereInput
  stage: StageWhereInput
}

input ApplicationCreateInput {
  offer: OfferCreateOneWithoutApplicationsInput!
  candidate: CandidateCreateOneWithoutApplicationsInput!
  stage: StageCreateOneInput!
}

input OfferCreateOneWithoutApplicationsInput {
  connect: OfferWhereUniqueInput
}

input CandidateCreateOneWithoutApplicationsInput {
  connect: CandidateWhereUniqueInput
}

input StageCreateOneInput {
  connect: StageWhereUniqueInput
}
