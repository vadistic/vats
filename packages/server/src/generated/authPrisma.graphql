# source: https://eu1.prisma.sh/vadistic-7a6c16/vats-auth/dev
# timestamp: Mon Sep 10 2018 22:57:16 GMT+0200 (Central European Summer Time)

type AggregateApiToken {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateInvitation {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateRefreshToken {
  count: Int!
}

type AggregateUser {
  count: Int!
}

enum ApiPermisionEnum {
  READ
  ADD
  MODIFY
  ADMIN
}

type ApiToken implements Node {
  id: ID!
  createdAt: DateTime!
  permissions: [ApiPermisionEnum!]!
  name: String!
  createdBy(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type ApiTokenConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ApiTokenEdge]!
  aggregate: AggregateApiToken!
}

input ApiTokenCreateInput {
  name: String!
  permissions: ApiTokenCreatepermissionsInput
  createdBy: UserCreateOneWithoutApiTokensInput!
}

input ApiTokenCreateManyWithoutCreatedByInput {
  create: [ApiTokenCreateWithoutCreatedByInput!]
  connect: [ApiTokenWhereUniqueInput!]
}

input ApiTokenCreatepermissionsInput {
  set: [ApiPermisionEnum!]
}

input ApiTokenCreateWithoutCreatedByInput {
  name: String!
  permissions: ApiTokenCreatepermissionsInput
}

"""An edge in a connection."""
type ApiTokenEdge {
  """The item at the end of the edge."""
  node: ApiToken!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ApiTokenOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ApiTokenPreviousValues {
  id: ID!
  createdAt: DateTime!
  permissions: [ApiPermisionEnum!]!
  name: String!
}

type ApiTokenSubscriptionPayload {
  mutation: MutationType!
  node: ApiToken
  updatedFields: [String!]
  previousValues: ApiTokenPreviousValues
}

input ApiTokenSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ApiTokenSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ApiTokenSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ApiTokenSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ApiTokenWhereInput
}

input ApiTokenUpdateInput {
  name: String
  permissions: ApiTokenUpdatepermissionsInput
  createdBy: UserUpdateOneWithoutApiTokensInput
}

input ApiTokenUpdateManyWithoutCreatedByInput {
  create: [ApiTokenCreateWithoutCreatedByInput!]
  connect: [ApiTokenWhereUniqueInput!]
  disconnect: [ApiTokenWhereUniqueInput!]
  delete: [ApiTokenWhereUniqueInput!]
  update: [ApiTokenUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [ApiTokenUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input ApiTokenUpdatepermissionsInput {
  set: [ApiPermisionEnum!]
}

input ApiTokenUpdateWithoutCreatedByDataInput {
  name: String
  permissions: ApiTokenUpdatepermissionsInput
}

input ApiTokenUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ApiTokenWhereUniqueInput!
  data: ApiTokenUpdateWithoutCreatedByDataInput!
}

input ApiTokenUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ApiTokenWhereUniqueInput!
  update: ApiTokenUpdateWithoutCreatedByDataInput!
  create: ApiTokenCreateWithoutCreatedByInput!
}

input ApiTokenWhereInput {
  """Logical AND on all given filters."""
  AND: [ApiTokenWhereInput!]

  """Logical OR on all given filters."""
  OR: [ApiTokenWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ApiTokenWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdBy: UserWhereInput
}

input ApiTokenWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Company implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  country: String!
  url: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  invitations(where: InvitationWhereInput, orderBy: InvitationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Invitation!]
}

"""A connection to a list of items."""
type CompanyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  name: String!
  country: String!
  url: String!
  users: UserCreateManyWithoutCompanyInput
  invitations: InvitationCreateManyInput
}

input CompanyCreateOneInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutUsersInput {
  create: CompanyCreateWithoutUsersInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutUsersInput {
  name: String!
  country: String!
  url: String!
  invitations: InvitationCreateManyInput
}

"""An edge in a connection."""
type CompanyEdge {
  """The item at the end of the edge."""
  node: Company!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  country_ASC
  country_DESC
  url_ASC
  url_DESC
}

type CompanyPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  country: String!
  url: String!
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
}

input CompanyUpdateDataInput {
  name: String
  country: String
  url: String
  users: UserUpdateManyWithoutCompanyInput
  invitations: InvitationUpdateManyInput
}

input CompanyUpdateInput {
  name: String
  country: String
  url: String
  users: UserUpdateManyWithoutCompanyInput
  invitations: InvitationUpdateManyInput
}

input CompanyUpdateOneInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
  delete: Boolean
  update: CompanyUpdateDataInput
  upsert: CompanyUpsertNestedInput
}

input CompanyUpdateOneWithoutUsersInput {
  create: CompanyCreateWithoutUsersInput
  connect: CompanyWhereUniqueInput
  delete: Boolean
  update: CompanyUpdateWithoutUsersDataInput
  upsert: CompanyUpsertWithoutUsersInput
}

input CompanyUpdateWithoutUsersDataInput {
  name: String
  country: String
  url: String
  invitations: InvitationUpdateManyInput
}

input CompanyUpsertNestedInput {
  update: CompanyUpdateDataInput!
  create: CompanyCreateInput!
}

input CompanyUpsertWithoutUsersInput {
  update: CompanyUpdateWithoutUsersDataInput!
  create: CompanyCreateWithoutUsersInput!
}

input CompanyWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  invitations_every: InvitationWhereInput
  invitations_some: InvitationWhereInput
  invitations_none: InvitationWhereInput
}

input CompanyWhereUniqueInput {
  id: ID
  url: String
}

scalar DateTime

type Invitation implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  token: String!
  email: String!
  expireAt: DateTime!
  createdBy(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type InvitationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InvitationEdge]!
  aggregate: AggregateInvitation!
}

input InvitationCreateInput {
  token: String!
  email: String!
  expireAt: DateTime!
  createdBy: UserCreateOneInput!
}

input InvitationCreateManyInput {
  create: [InvitationCreateInput!]
  connect: [InvitationWhereUniqueInput!]
}

"""An edge in a connection."""
type InvitationEdge {
  """The item at the end of the edge."""
  node: Invitation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InvitationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  token_ASC
  token_DESC
  email_ASC
  email_DESC
  expireAt_ASC
  expireAt_DESC
}

type InvitationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  token: String!
  email: String!
  expireAt: DateTime!
}

type InvitationSubscriptionPayload {
  mutation: MutationType!
  node: Invitation
  updatedFields: [String!]
  previousValues: InvitationPreviousValues
}

input InvitationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InvitationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvitationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvitationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InvitationWhereInput
}

input InvitationUpdateDataInput {
  token: String
  email: String
  expireAt: DateTime
  createdBy: UserUpdateOneInput
}

input InvitationUpdateInput {
  token: String
  email: String
  expireAt: DateTime
  createdBy: UserUpdateOneInput
}

input InvitationUpdateManyInput {
  create: [InvitationCreateInput!]
  connect: [InvitationWhereUniqueInput!]
  disconnect: [InvitationWhereUniqueInput!]
  delete: [InvitationWhereUniqueInput!]
  update: [InvitationUpdateWithWhereUniqueNestedInput!]
  upsert: [InvitationUpsertWithWhereUniqueNestedInput!]
}

input InvitationUpdateWithWhereUniqueNestedInput {
  where: InvitationWhereUniqueInput!
  data: InvitationUpdateDataInput!
}

input InvitationUpsertWithWhereUniqueNestedInput {
  where: InvitationWhereUniqueInput!
  update: InvitationUpdateDataInput!
  create: InvitationCreateInput!
}

input InvitationWhereInput {
  """Logical AND on all given filters."""
  AND: [InvitationWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvitationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvitationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  expireAt: DateTime

  """All values that are not equal to given value."""
  expireAt_not: DateTime

  """All values that are contained in given list."""
  expireAt_in: [DateTime!]

  """All values that are not contained in given list."""
  expireAt_not_in: [DateTime!]

  """All values less than the given value."""
  expireAt_lt: DateTime

  """All values less than or equal the given value."""
  expireAt_lte: DateTime

  """All values greater than the given value."""
  expireAt_gt: DateTime

  """All values greater than or equal the given value."""
  expireAt_gte: DateTime
  createdBy: UserWhereInput
}

input InvitationWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPerson(data: PersonCreateInput!): Person!
  createApiToken(data: ApiTokenCreateInput!): ApiToken!
  createRefreshToken(data: RefreshTokenCreateInput!): RefreshToken!
  createCompany(data: CompanyCreateInput!): Company!
  createInvitation(data: InvitationCreateInput!): Invitation!
  createUser(data: UserCreateInput!): User!
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateApiToken(data: ApiTokenUpdateInput!, where: ApiTokenWhereUniqueInput!): ApiToken
  updateRefreshToken(data: RefreshTokenUpdateInput!, where: RefreshTokenWhereUniqueInput!): RefreshToken
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateInvitation(data: InvitationUpdateInput!, where: InvitationWhereUniqueInput!): Invitation
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteApiToken(where: ApiTokenWhereUniqueInput!): ApiToken
  deleteRefreshToken(where: RefreshTokenWhereUniqueInput!): RefreshToken
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteInvitation(where: InvitationWhereUniqueInput!): Invitation
  deleteUser(where: UserWhereUniqueInput!): User
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  upsertApiToken(where: ApiTokenWhereUniqueInput!, create: ApiTokenCreateInput!, update: ApiTokenUpdateInput!): ApiToken!
  upsertRefreshToken(where: RefreshTokenWhereUniqueInput!, create: RefreshTokenCreateInput!, update: RefreshTokenUpdateInput!): RefreshToken!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  upsertInvitation(where: InvitationWhereUniqueInput!, create: InvitationCreateInput!, update: InvitationUpdateInput!): Invitation!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyPersons(data: PersonUpdateInput!, where: PersonWhereInput): BatchPayload!
  updateManyApiTokens(data: ApiTokenUpdateInput!, where: ApiTokenWhereInput): BatchPayload!
  updateManyRefreshTokens(data: RefreshTokenUpdateInput!, where: RefreshTokenWhereInput): BatchPayload!
  updateManyCompanies(data: CompanyUpdateInput!, where: CompanyWhereInput): BatchPayload!
  updateManyInvitations(data: InvitationUpdateInput!, where: InvitationWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  deleteManyApiTokens(where: ApiTokenWhereInput): BatchPayload!
  deleteManyRefreshTokens(where: RefreshTokenWhereInput): BatchPayload!
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  deleteManyInvitations(where: InvitationWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Person implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  refreshTokens(where: RefreshTokenWhereInput, orderBy: RefreshTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RefreshToken!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  activeUser(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type PersonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  refreshTokens: RefreshTokenCreateManyInput
  users: UserCreateManyWithoutPersonInput
  activeUser: UserCreateOneInput!
}

input PersonCreateOneWithoutUsersInput {
  create: PersonCreateWithoutUsersInput
  connect: PersonWhereUniqueInput
}

input PersonCreateWithoutUsersInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  refreshTokens: RefreshTokenCreateManyInput
  activeUser: UserCreateOneInput!
}

"""An edge in a connection."""
type PersonEdge {
  """The item at the end of the edge."""
  node: Person!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type PersonPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
}

input PersonUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  refreshTokens: RefreshTokenUpdateManyInput
  users: UserUpdateManyWithoutPersonInput
  activeUser: UserUpdateOneInput
}

input PersonUpdateOneWithoutUsersInput {
  create: PersonCreateWithoutUsersInput
  connect: PersonWhereUniqueInput
  delete: Boolean
  update: PersonUpdateWithoutUsersDataInput
  upsert: PersonUpsertWithoutUsersInput
}

input PersonUpdateWithoutUsersDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  refreshTokens: RefreshTokenUpdateManyInput
  activeUser: UserUpdateOneInput
}

input PersonUpsertWithoutUsersInput {
  update: PersonUpdateWithoutUsersDataInput!
  create: PersonCreateWithoutUsersInput!
}

input PersonWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  refreshTokens_every: RefreshTokenWhereInput
  refreshTokens_some: RefreshTokenWhereInput
  refreshTokens_none: RefreshTokenWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  activeUser: UserWhereInput
}

input PersonWhereUniqueInput {
  id: ID
  email: String
}

type Query {
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  apiTokens(where: ApiTokenWhereInput, orderBy: ApiTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ApiToken]!
  refreshTokens(where: RefreshTokenWhereInput, orderBy: RefreshTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RefreshToken]!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  invitations(where: InvitationWhereInput, orderBy: InvitationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Invitation]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  person(where: PersonWhereUniqueInput!): Person
  apiToken(where: ApiTokenWhereUniqueInput!): ApiToken
  refreshToken(where: RefreshTokenWhereUniqueInput!): RefreshToken
  company(where: CompanyWhereUniqueInput!): Company
  invitation(where: InvitationWhereUniqueInput!): Invitation
  user(where: UserWhereUniqueInput!): User
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  apiTokensConnection(where: ApiTokenWhereInput, orderBy: ApiTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApiTokenConnection!
  refreshTokensConnection(where: RefreshTokenWhereInput, orderBy: RefreshTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RefreshTokenConnection!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  invitationsConnection(where: InvitationWhereInput, orderBy: InvitationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InvitationConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type RefreshToken implements Node {
  id: ID!
  createdAt: DateTime!
  ip: String!
  company(where: CompanyWhereInput): Company!
  expireAt: DateTime!
}

"""A connection to a list of items."""
type RefreshTokenConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RefreshTokenEdge]!
  aggregate: AggregateRefreshToken!
}

input RefreshTokenCreateInput {
  ip: String!
  expireAt: DateTime!
  company: CompanyCreateOneInput!
}

input RefreshTokenCreateManyInput {
  create: [RefreshTokenCreateInput!]
  connect: [RefreshTokenWhereUniqueInput!]
}

"""An edge in a connection."""
type RefreshTokenEdge {
  """The item at the end of the edge."""
  node: RefreshToken!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RefreshTokenOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  ip_ASC
  ip_DESC
  expireAt_ASC
  expireAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RefreshTokenPreviousValues {
  id: ID!
  createdAt: DateTime!
  ip: String!
  expireAt: DateTime!
}

type RefreshTokenSubscriptionPayload {
  mutation: MutationType!
  node: RefreshToken
  updatedFields: [String!]
  previousValues: RefreshTokenPreviousValues
}

input RefreshTokenSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RefreshTokenSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RefreshTokenSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RefreshTokenSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RefreshTokenWhereInput
}

input RefreshTokenUpdateDataInput {
  ip: String
  expireAt: DateTime
  company: CompanyUpdateOneInput
}

input RefreshTokenUpdateInput {
  ip: String
  expireAt: DateTime
  company: CompanyUpdateOneInput
}

input RefreshTokenUpdateManyInput {
  create: [RefreshTokenCreateInput!]
  connect: [RefreshTokenWhereUniqueInput!]
  disconnect: [RefreshTokenWhereUniqueInput!]
  delete: [RefreshTokenWhereUniqueInput!]
  update: [RefreshTokenUpdateWithWhereUniqueNestedInput!]
  upsert: [RefreshTokenUpsertWithWhereUniqueNestedInput!]
}

input RefreshTokenUpdateWithWhereUniqueNestedInput {
  where: RefreshTokenWhereUniqueInput!
  data: RefreshTokenUpdateDataInput!
}

input RefreshTokenUpsertWithWhereUniqueNestedInput {
  where: RefreshTokenWhereUniqueInput!
  update: RefreshTokenUpdateDataInput!
  create: RefreshTokenCreateInput!
}

input RefreshTokenWhereInput {
  """Logical AND on all given filters."""
  AND: [RefreshTokenWhereInput!]

  """Logical OR on all given filters."""
  OR: [RefreshTokenWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RefreshTokenWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  ip: String

  """All values that are not equal to given value."""
  ip_not: String

  """All values that are contained in given list."""
  ip_in: [String!]

  """All values that are not contained in given list."""
  ip_not_in: [String!]

  """All values less than the given value."""
  ip_lt: String

  """All values less than or equal the given value."""
  ip_lte: String

  """All values greater than the given value."""
  ip_gt: String

  """All values greater than or equal the given value."""
  ip_gte: String

  """All values containing the given string."""
  ip_contains: String

  """All values not containing the given string."""
  ip_not_contains: String

  """All values starting with the given string."""
  ip_starts_with: String

  """All values not starting with the given string."""
  ip_not_starts_with: String

  """All values ending with the given string."""
  ip_ends_with: String

  """All values not ending with the given string."""
  ip_not_ends_with: String
  expireAt: DateTime

  """All values that are not equal to given value."""
  expireAt_not: DateTime

  """All values that are contained in given list."""
  expireAt_in: [DateTime!]

  """All values that are not contained in given list."""
  expireAt_not_in: [DateTime!]

  """All values less than the given value."""
  expireAt_lt: DateTime

  """All values less than or equal the given value."""
  expireAt_lte: DateTime

  """All values greater than the given value."""
  expireAt_gt: DateTime

  """All values greater than or equal the given value."""
  expireAt_gte: DateTime
  company: CompanyWhereInput
}

input RefreshTokenWhereUniqueInput {
  id: ID
}

type Subscription {
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  apiToken(where: ApiTokenSubscriptionWhereInput): ApiTokenSubscriptionPayload
  refreshToken(where: RefreshTokenSubscriptionWhereInput): RefreshTokenSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  invitation(where: InvitationSubscriptionWhereInput): InvitationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: UserStatus!
  email: String
  apiTokens(where: ApiTokenWhereInput, orderBy: ApiTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ApiToken!]
  instanceId: ID!
  company(where: CompanyWhereInput): Company!
  person(where: PersonWhereInput): Person!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  status: UserStatus!
  email: String
  instanceId: ID!
  apiTokens: ApiTokenCreateManyWithoutCreatedByInput
  company: CompanyCreateOneWithoutUsersInput!
  person: PersonCreateOneWithoutUsersInput!
}

input UserCreateManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutPersonInput {
  create: [UserCreateWithoutPersonInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutApiTokensInput {
  create: UserCreateWithoutApiTokensInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutApiTokensInput {
  status: UserStatus!
  email: String
  instanceId: ID!
  company: CompanyCreateOneWithoutUsersInput!
  person: PersonCreateOneWithoutUsersInput!
}

input UserCreateWithoutCompanyInput {
  status: UserStatus!
  email: String
  instanceId: ID!
  apiTokens: ApiTokenCreateManyWithoutCreatedByInput
  person: PersonCreateOneWithoutUsersInput!
}

input UserCreateWithoutPersonInput {
  status: UserStatus!
  email: String
  instanceId: ID!
  apiTokens: ApiTokenCreateManyWithoutCreatedByInput
  company: CompanyCreateOneWithoutUsersInput!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
  email_ASC
  email_DESC
  instanceId_ASC
  instanceId_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: UserStatus!
  email: String
  instanceId: ID!
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  status: UserStatus
  email: String
  instanceId: ID
  apiTokens: ApiTokenUpdateManyWithoutCreatedByInput
  company: CompanyUpdateOneWithoutUsersInput
  person: PersonUpdateOneWithoutUsersInput
}

input UserUpdateInput {
  status: UserStatus
  email: String
  instanceId: ID
  apiTokens: ApiTokenUpdateManyWithoutCreatedByInput
  company: CompanyUpdateOneWithoutUsersInput
  person: PersonUpdateOneWithoutUsersInput
}

input UserUpdateManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCompanyInput!]
}

input UserUpdateManyWithoutPersonInput {
  create: [UserCreateWithoutPersonInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPersonInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPersonInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutApiTokensInput {
  create: UserCreateWithoutApiTokensInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutApiTokensDataInput
  upsert: UserUpsertWithoutApiTokensInput
}

input UserUpdateWithoutApiTokensDataInput {
  status: UserStatus
  email: String
  instanceId: ID
  company: CompanyUpdateOneWithoutUsersInput
  person: PersonUpdateOneWithoutUsersInput
}

input UserUpdateWithoutCompanyDataInput {
  status: UserStatus
  email: String
  instanceId: ID
  apiTokens: ApiTokenUpdateManyWithoutCreatedByInput
  person: PersonUpdateOneWithoutUsersInput
}

input UserUpdateWithoutPersonDataInput {
  status: UserStatus
  email: String
  instanceId: ID
  apiTokens: ApiTokenUpdateManyWithoutCreatedByInput
  company: CompanyUpdateOneWithoutUsersInput
}

input UserUpdateWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCompanyDataInput!
}

input UserUpdateWithWhereUniqueWithoutPersonInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPersonDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutApiTokensInput {
  update: UserUpdateWithoutApiTokensDataInput!
  create: UserCreateWithoutApiTokensInput!
}

input UserUpsertWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCompanyDataInput!
  create: UserCreateWithoutCompanyInput!
}

input UserUpsertWithWhereUniqueWithoutPersonInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPersonDataInput!
  create: UserCreateWithoutPersonInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: UserStatus

  """All values that are not equal to given value."""
  status_not: UserStatus

  """All values that are contained in given list."""
  status_in: [UserStatus!]

  """All values that are not contained in given list."""
  status_not_in: [UserStatus!]
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  instanceId: ID

  """All values that are not equal to given value."""
  instanceId_not: ID

  """All values that are contained in given list."""
  instanceId_in: [ID!]

  """All values that are not contained in given list."""
  instanceId_not_in: [ID!]

  """All values less than the given value."""
  instanceId_lt: ID

  """All values less than or equal the given value."""
  instanceId_lte: ID

  """All values greater than the given value."""
  instanceId_gt: ID

  """All values greater than or equal the given value."""
  instanceId_gte: ID

  """All values containing the given string."""
  instanceId_contains: ID

  """All values not containing the given string."""
  instanceId_not_contains: ID

  """All values starting with the given string."""
  instanceId_starts_with: ID

  """All values not starting with the given string."""
  instanceId_not_starts_with: ID

  """All values ending with the given string."""
  instanceId_ends_with: ID

  """All values not ending with the given string."""
  instanceId_not_ends_with: ID
  apiTokens_every: ApiTokenWhereInput
  apiTokens_some: ApiTokenWhereInput
  apiTokens_none: ApiTokenWhereInput
  company: CompanyWhereInput
  person: PersonWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
