# GLOBAL TYPES
type Workspace {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  # connections
  events: [Event!]! @relation(name: "WorkspaceEventTarget")
  users: [User!]!
  jobs: [Job!]!
  candidates: [Candidate!]!

  workflows: [Workflow!]! @relation(name: "WorkspaceWorkflows")
  # make required?
  workflowDefault: Workflow @relation(name: "WorkspaceWorkflowDefault")

  # other?
  invites: [Invite!]!
  tags: [Tag!]!

  # info
  name: String!
}

type User {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  workspace: Workspace!

  #notifications
  events: Event @relation(name: "UserEventActor")
  notifications: [Notification!]!

  # subscribtion interface
  subscriptionJobs: [Job!]!
  subscriptionCandidates: [Candidate!]!
  subscriptionTasks: [Task!]! @relation(name: "TaskSubscriber")

  # connections
  tasks: [Task!]! @relation(name: "TaskOwner")

  # info
  firstName: String!
  lastName: String!
  email: String! @unique
  username: String!
  lastLogin: DateTime
  deletedAt: DateTime

  # additional info
  position: String
  avatar: File
}

type Job {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  workspace: Workspace!

  # events
  subscribers: [User!]!
  events: [Event!]! @relation(name: "JobEventTarget")

  # connections
  applications: [Application!]!

  # nodes
  workflow: Workflow!
  comments: [Comment!]!

  # info
  type: JobType!
  department: String
  locations: [Location!]!
  name: String!
  description: String
  requirements: String

  # TODO: Add type for common company description
  # TODO: Add type for specific client in agency setting
}

enum JobType {
  Draft
  Published
  Archived
}

type Application {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!

  # ats
  type: ApplicationType!
  disqualificationLink: DisqualificationLink
  stage: Stage!

  # connections
  job: Job!
  candidate: Candidate!
}

enum ApplicationType {
  Qualified
  Disqualified
}

type Candidate {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  workspace: Workspace!

  events: [Event!]! @relation(name: "CandidateEventTarget")
  subscribers: [User!]!

  # info
  firstName: String!
  lastName: String!
  emails: [String!]!
  phones: [String!]!
  links: [String!]!
  avatar: File @relation(name: "CandidateAvatarFile")

  resumesString: [String!]!
  resumesFile: [File!]! @relation(name: "CandidateResumeFiles")
  coverLettersString: [String!]!
  coverLettersFile: [File!]! @relation(name: "CandidateCoverLetterFiles")

  tags: [Tag!]!
  # TODO: Create type for sources (maybe with pivot)
  source: [String!]!
  fields: [FieldLink!]!

  # conections
  tasks: [Task!]!
  applications: [Application!]!
  comments: [Comment!]!
}

type Task {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  # event system
  subscribers: [User!]! @relation(name: "TaskSubscriber")

  # connections
  owners: [User!]! @relation(name: "TaskOwner")

  candidate: Candidate

  # info
  title: String
  description: String
  dueAt: DateTime
}

# DDEPENDENCIES
type Invite {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  email: String!
  expireAt: DateTime!
  invitedBy: User!
}

type Workflow {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String!
  description: String
  stages: [Stage!]!
  disqualifications: [Disqualification!]!
  fields: [Field!]!
}

type Disqualification {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String!
  description: String
}

type DisqualificationLink {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  disqualification: Disqualification!
  createdBy: User!
  justification: String
}

type Stage {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String!
  description: String
  type: StageType!
}

enum StageType {
  New
  Pipeline
  Final
}

type Comment {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  # connections
  createdBy: User!
  parent: Comment

  # info
  content: String!
}

# NOTIFICATIONS
type Event {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  type: EventType!

  # actor interface
  actorType: EventActorType!
  actorUser: User @relation(name: "UserEventActor")
  actorCandidate: Candidate @relation(name: "CandidateEventActor")

  # target interface
  targetType: EventTargetType!
  targetCandidate: Candidate @relation(name: "CandidateEventTarget")
  targetJob: Job @relation(name: "JobEventTarget")
  targetTask: Task @relation(name: "TaskEventTarget")
  targetWorkspace: Workspace @relation(name: "WorkspaceEventTarget")
}

enum EventType {
  Default
  Message
  CommentCreate
  CommentEdit
  CommentDelete
}

enum EventActorType {
  System
  User
  Candidate
}

enum EventTargetType {
  Candidate
  Job
  Task
  Workspace
}

type Notification {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  type: NotificationType!
  user: User!
  event: Event!
}

enum NotificationType {
  Unread
  Read
}

# SYSTEM TYPES
type Location {
  id: ID! @unique
  country: String!
  region: String!
  city: String!
  zip: String!
}

type Field {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  type: FieldType!
  label: String!
}

enum FieldType {
  Int
  Float
  String
  Text
  Boolean
  DateTime
}

type FieldLink {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  field: Field!
  value: String
}

type Tag {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  label: String!
}

type File {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  size: Int!
  type: String!
  name: String!
  url: String! @unique
}
