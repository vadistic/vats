# GLOBAL TYPES
type Workspace {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  # connections
  events: [Event!]! @relation(name: "WorkspaceEventTarget")
  users: [User!]!
  jobs: [Job!]!
  applications: [Application!]!
  candidates: [Candidate!]!

  workflows: [Workflow!]! @relation(name: "WorkspaceWorkflows")
  workflowDefault: Workflow @relation(name: "WorkspaceDefaultWorkflow")

  # other?
  invites: [Invite!]!
  tags: [Tag!]!

  # info
  name: String!
}

type User {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  workspace: Workspace!

  #notifications
  events: Event @relation(name: "UserEventActor")
  notifications: [Notification!]!

  # subscribtion interface
  subscriptionJobs: [Job!]!
  subscriptionCandidates: [Candidate!]!
  subscriptionTasks: [Task!]! @relation(name: "TaskSubscriber")

  # connections
  tasks: [Task!]! @relation(name: "TaskOwner")

  #info
  firstName: String!
  lastName: String!
  email: String! @unique
  username: String!
  lastLogin: DateTime
  deletedAt: DateTime

  # additional info
  position: String
  avatar: File
}

type Job {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  workspace: Workspace!

  # events
  subscribers: [User!]!
  events: [Event!]! @relation(name: "JobEventTarget")

  # connections
  applications: [Application!]!

  # nodes
  workflow: Workflow!
  comments: [Comment!]!

  # info
  status: JobType!
  department: String
  locations: [Location!]!
  name: String!
  description: String
  requirements: String
}

enum JobType {
  DRAFT
  PUBLISHED
  ARCHIVED
}

type Application {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  workspace: Workspace!

  # ats
  disqualifyReason: DisqualifyReason

  # connections
  job: Job!
  candidate: Candidate!
  stage: Stage
}

type Candidate {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  workspace: Workspace!

  events: [Event!]! @relation(name: "CandidateEventTarget")
  subscribers: [User!]!

  # info
  firstName: String!
  lastName: String!
  emails: [String!]!
  phones: [String!]!
  links: [String!]!
  avatar: File @relation(name: "CandidateAvatarFile")

  resumesString: [String!]!
  resumesFile: [File!]! @relation(name: "CandidateResumeFiles")
  coverLettersString: [String!]!
  coverLettersFile: [File!]! @relation(name: "CandidateCoverLetterFiles")

  tags: [Tag!]!
  source: [String!]!
  fields: [FieldLink!]!

  # conections
  tasks: [Task!]!
  applications: [Application!]!
  comments: [Comment!]!
}

type Task {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  workspace: Workspace!

  # event system
  subscribers: [User!]! @relation(name: "TaskSubscriber")

  # connections
  owners: [User!]! @relation(name: "TaskOwner")

  candidate: Candidate

  # info
  title: String
  description: String
  dueAt: DateTime
}

# DDEPENDENCIES
type Invite {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  workspace: Workspace!

  email: String!
  expireAt: DateTime!
  invitedBy: User!
}

type Workflow {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String!
  description: String
  stages: [Stage!]!
  disqualifyReasons: [DisqualifyReason!]!
}

type DisqualifyReason {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String!
  description: String
}

type Stage {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String!
  description: String
  type: StageType!
}

enum StageType {
  NEW
  QUALIFIED
  HIRED
  DISQUALIFIED
}

type Comment {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  # connections
  createdBy: User!
  parent: Comment

  # info
  content: String!
}

# NOTIFICATIONS
type Event {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  workspace: Workspace! @relation(name: "WorkspaceEvent")

  type: EventType!

  # actor interface
  actorType: EventActorType!
  actorUser: User @relation(name: "UserEventActor")
  actorCandidate: Candidate @relation(name: "CandidateEventActor")

  # target interface
  targetType: EventTargetType!
  targetCandidate: Candidate @relation(name: "CandidateEventTarget")
  targetJob: Job @relation(name: "JobEventTarget")
  targetTask: Task @relation(name: "TaskEventTarget")
  targetWorkspace: Workspace @relation(name: "WorkspaceEventTarget")
}

enum EventType {
  DEFAULT
  MESSAGE
  COMMENT_CREATE
  COMMENT_EDIT
  COMMENT_DELETE
}

enum EventActorType {
  SYSTEM
  USER
  CANDIDATE
}

enum EventTargetType {
  CANDIDATE
  JOB
  TASK
  WORKSPACE
}

type Notification {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  type: NotificationType!
  user: User!
  event: Event!
}

enum NotificationType {
  NEW
  UNREAD
  READ
}

# SYSTEM TYPES
type Location {
  id: ID! @unique
  country: String!
  region: String!
  city: String!
  zip: String!
}

type Field {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  type: FieldType!
  label: String!
}

enum FieldType {
  INT
  FLOAT
  STRING
  TEXT
  BOOLEAN
  DATE_TIME
}

type FieldLink {
  id: ID! @unique

  candidate: Candidate!
  value: String
}

type Tag {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  label: String!
}

type File {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  size: Int!
  type: String!
  name: String!
  url: String! @unique
}
